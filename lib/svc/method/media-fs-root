#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2012-2016 Peter C. Tribble.
#
# Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
#
#
# Copyright (c) 1984, 1986, 1987, 1988, 1989 AT&T.
# All rights reserved.
#

# Make sure that the libraries essential to this stage of booting can be found.
LD_LIBRARY_PATH=/lib; export LD_LIBRARY_PATH

builtin grep
builtin rm

DEVPROP=/sbin/devprop
SED=/usr/bin/sed
CUT=/usr/bin/cut
MOUNT=/sbin/mount

# compressed archive
SOLARIS_ZLIB="solaris.zlib"

. /lib/svc/share/live_fs_include.sh
. /lib/svc/share/smf_include.sh
. /lib/svc/share/fs_include.sh

volsetid=$( < "/.volsetid" )

echo "\rPreparing image for use" >/dev/msglog

# Determine if any of the USB devices contains a UFS filesystem.
# For devices that do, attempt to mount them to see if the .volsetid
# file exists and matches the root we're booted from

/sbin/listusb | while read dev rdev
do
	/usr/lib/fs/ufs/fstyp $rdev 2>&1 | grep "^ufs$"
	if [ $? -eq 0 ]; then
		$MOUNT -F ufs -o nologging,noatime $dev /.cdrom || break
		if [[ "$volsetid" != "$( < "/.cdrom/.volsetid" )" ]]; then
			/sbin/umount -f $dev
			continue
		else
			echo "" > /.liveusb
			break
		fi
	fi
done

# ..Else look for CD
[ ! -f /.liveusb ] && /sbin/listcd | while read dev rdev
do
	# 
	# For systems that might have multiple CD drives,
	# make sure that the filesystem gets mounted off of
	# the same CD drive as the one we're booting from.
	# 
	/usr/lib/fs/hsfs/fstyp -v $rdev 2>&1 | \
	    grep "Volume set id: $volsetid" > /dev/null
	if [ $? -eq 0 ]; then
		$MOUNT -F hsfs -o ro $dev /.cdrom || break
	fi
done

#
# Are we a single image? If we haven't got /usr already, try
# and mount it from solaris.zlib on the media
#
if [ ! -f /usr/lib/zap/zap ]; then

# Check if mount of /.cdrom failed.
$MOUNT | grep "^/.cdrom"
if [ $? -ne 0 ]; then
	echo "** FATAL **: Unable to access media"
	exit $SMF_EXIT_ERR_FATAL
fi

#
# Can not mount solaris.zlib using just the mount command,
# because the mount command enforces nosetuid, and /usr
# needs to have the setuid capability.
#
# Must use lofiadm in combination with the mount command, as
# with the changes to make lofi work from within a zone, a
# properly populated /dev tree is required to use simply "mount"
#
usr_lofi_dev=$(/usr/sbin/lofiadm -a /.cdrom/$SOLARIS_ZLIB)
if [ $? -ne 0 -o -z "$usr_lofi_dev" ]; then
	echo "lofiadm of /usr FAILED!" > /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi
$MOUNT -F hsfs -o ro ${usr_lofi_dev} /usr
if [ $? -ne 0 ]; then
	echo "/usr MOUNT FAILED!" > /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi

echo "Done mounting /usr filesystem" > /dev/msglog

#
# end of if [ ! -f /usr/lib/zap/zap ]
#
fi

#
# Update kernel driver.conf cache with any additional driver.conf
# files found on /usr, and device permissions from /etc/minor_perm.
#
/usr/sbin/devfsadm -I -P

[ -f /etc/.dynamic_routing ] && rm -f /etc/.dynamic_routing

#
# Set up the optimized libc mounts
#
libc_mount

# 
# Discover architecture and find and mount optimal libc_psr 
#  
ARCH=`/usr/bin/uname -m`
PLAT=`/usr/bin/uname -i`
if [ "$ARCH" = "sun4v" ]; then 
	sun4v_libc_psr_mount 
elif [ "$ARCH" = "sun4u" ]; then 
	if [ -h /platform/$PLAT/lib/libc_psr.so.1 ]; then 
		LINKSTO=`/usr/bin/ls -l /platform/$PLAT/lib/libc_psr.so.1 | 
			/usr/bin/awk '{print $NF}'` 
		if [ "$LINKSTO" = "../../sun4u-us3/lib/libc_psr.so.1" ]; then 
			ARCH=sun4u-us3 
		fi
	fi
	sun4u_libc_psr_mount 
fi

#
# All SMF services are imported and service profiles are applied to the
# boot archive during image construction time.  However, the link for the
# platform.xml service profile is not created because we are unable to
# determine the platform on which the image will be booted at build time.
#
# The link for platform.xml file must be created during boot time
# depending on platform type.
#
apply_platform_profile

rm -f /etc/svc/repository-boot*

# Determine if remote access via ssh should be enabled
livessh=`$DEVPROP livessh`

#
# Set up the terminal correctly for prompting
#
TERM=sun-color
export TERM

#
# if requested via GRUB menu selection:
#     set keyboard layout to default of English
#     create keys and enable ssh
# else
#     Ask user to configure Keyboard Layout
#
if [ "$livessh" = "enable" ]; then
    /usr/bin/kbd -s US-English
    /lib/svc/method/sshd -c
    /usr/sbin/svcadm enable network/ssh
else
    /usr/bin/kbd -s </dev/console >/dev/console 2>&1
fi

exit $SMF_EXIT_OK
